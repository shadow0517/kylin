数据采集框架

一：模块关系
             |                |          |                |          |                |
    Input  --|----------------|          |----------------|          |----------------|->
      feed-->|                |--conf_q->|                |--exec_q->|          thread|
             |                |          |                |          |                |
             |      feed      |          |      core      |          |      work      |
             |                |          |                |          |                |
  feedback<--|                |<-back_q--|                |<-rslt_q--|           event|
    Output <-|----------------|          |----------------|          |----------------|--
             |                |          |                |          |                |
feed模块：
	负责用户配置管理。用户调用feed函数进行采集行为的配置，配置采用json数据格式。同时用户需要注册feedback函数将采集结果返回到用户。
	
core模块：
	负责框架调度管理。主管理线程主要完成2个任务：
	1）：向前获取feed模块的用户配置，解析后推送到work模块。配置解析函数需要用户注册到模块中。
	2）：向后获取work模块的采集数据，进行相应的处理。数据处理函数需要用户注册到模块中。
work模块：
	负责数据采集管理。通过线程+事件的方式实现异步的数据采集，采集函数和事件处理函数需要用户注册到模块中。
	
	
二：流程分析
Input流程：
	1）feed模块通过feed函数接收用户配置，将配置存放在conf_q中；feed函数传入一个采集者对象和一个json对象，json对象有约定的规范。
	2）core模块定期遍历所有的conf_q，将配置信息依据用户需要转换成具体格式的结构存放到work模块对应的exec_q中；core模块实现为一个
		线程，在feed模块和work模块中充当中间代理人的作用，格式转换的工作是一个回调函数，如果用户不注册这个回调，框架代码提供默认
		实现，即将conf_q中的内容enqueue到执行队列中。
	3）work模块从执行队列中获取执行单元，以单独线程的方式采集数据；数据采集是一个回调函数，需要用户注册，而且该回调函数必须返回一
		个套接字，采集周期由用户指定，默认周期是5秒一次。
Output流程：
	1）work模块在事件到来时调用相应的事件处理函数将结果存放在rslt_q中；事件处理函数是一个回调函数，如果用户不注册这个回调，框架代
		码提供默认实现，即将收到的报文enqueue到rslt_q中。
	2）core模块定期遍历所有的rslt_q，将采集的数据根据用户需求进行处理；数据处理是一个回调函数，如果用户不注册这个回调，框架代码提
		供默认实现，即将采集的数据enqueue到back_q中；同时调用feedback函数。
	3）feed模块feedback函数是一个回调函数，需要用户注册。

三：数据结构