软件设计标准
1：采用模块化的方式设计，包括模块的加载和卸载，以动态库的形式发布；
2：配置文件采用json格式，以.conf为文件后缀名；
3：对外提供服务的模块（进程之间）必须提供入口参数检查，以单独的文件形式，建议命名方式为kylin_xxx_param_check.c[h]；
	模块之间的接口不强制要求参数检查，模块内的接口不建议做参数检查。
	建议参数检查函数的命名方式为kylin_error_t kylin_[module]_check_[param](const kylin_[param]_t param, char *error);
4：每个模块中对数据的操作（如存储方式，遍历以及更新等）和由该数据衍生出的数据业务逻辑操作应该明确区分，
	避免破坏单个模块文件的代码清晰度和简洁性。建议对数据部分的操作只提供add, delete, update, get_first, get_next, 
	get_info, foreach, dump等操作，文件的命名方式为kylin_xxx_data.c[h]，业务逻辑根据功能依次划分文件来实现。
	建议dump函数的命名方式为void kylin_[module]_[data]_dump(const kylin_[data] *info, int (*print)(const char *fmt, ...));
5：前后端数据的传递具有不可预期和不可靠性，不能假设对方的数据一定是可预期的，所以对数据的处理一定要具有冗余和可伸展。建议配置信息
	（如json形式）到结构信息的转换，函数命名方式为kylin_[module]_[data]_config_get(const kylin_[data]_t *data, char *config, size_t len);
	和 kylin_[module]_[data]_config_put(const char *config, size_t len, kylin_[data]_t *data);